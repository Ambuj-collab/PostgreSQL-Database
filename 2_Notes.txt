1) The following queries are going to use a new dataset that simulates an E-Commerce application!

	CREATE TABLE users (
	  id SERIAL PRIMARY KEY,
	  first_name VARCHAR,
	  last_name VARCHAR
	);
	CREATE TABLE products (
	  id SERIAL PRIMARY KEY,
	  name VARCHAR,
	  department VARCHAR,
	  price INTEGER,
	  weight INTEGER
	);
	CREATE TABLE orders (
	  id SERIAL PRIMARY KEY,
	  user_id INTEGER REFERENCES users(id),
	  product_id INTEGER REFERENCES products(id),
	  paid BOOLEAN
	);
	 
  To insert the data into these table, refer to 2_load_new_large_dataset.sql file under Approaching_Database_Design/Joins_and_Aggregation/Aggregations
	  
  The relationship between users and products table is a many-to-many relationship. We are modeling that relationship by using the orders table. The relationship between users and orders is a one-to-many. 
  
2) Question:
	Let's get more familiar with the E-Commerce dataset.
	a) Write a query to print the number of paid and unpaid orders.
	   The result should look something like this:
		+-------+-------+
		| paid  | count |
		+-------+-------+
		| true  | 4     |
		+-------+-------+
		| false | 2     |
		+-------+-------+
		
			SELECT paid, COUNT(*) 
			FROM orders
			GROUP BY paid;
			
	b) Print the first_name and last_name of each user, then whether or not they have paid for their order.
		
		SELECT first_name, last_name, paid
		FROM orders
		JOIN users ON orders.user_id = users.id;
		
	c) Fetch all the details of all the products in a sorted order based on the price.
		SELECT * 
		FROM products
		ORDER BY price;        --> to get the products in ascending order of their price. Default is ascending order  
		
		OR 
		
		SELECT * 
		FROM products
		ORDER BY price ASC;   --> to get the products in ascending order of their price 
		
		SELECT * 
		FROM products
		ORDER BY price DESC;  --> to get the products in descending order of their price 
		
	d) Fetch all the details of all the products in a sorted order based on the name. Sorting of records can be done not only with numbers but with Strings.
		SELECT * 
		FROM products
		ORDER BY name; 
		
	e) 
	You can ORDER BY multiple different properties.
	SELECT * 
	FROM products
	ORDER BY price;  --> How the ordering will be done if some rows are having the same price? By default, it will be done based on the insertion order of records.
	
	If we want to, we can not only sort by price, but if two records have the same price, we can then apply a second ordering rule. So, in this example, let's try to sort by price and then if two records have the same price, I want to then order those two records by weight.
	
	SELECT * 
	FROM products
	ORDER BY price, weight;
	
	You can apply sorting order option to each of these cloumns like below.
	
	SELECT * 
	FROM products
	ORDER BY price ASC, weight DESC;
	
3) OFFSET keyword:
==========================
	We make use of OFFSET any time we want to skip some number of records in a result-set. 
		
		SELECT COUNT(*) FROM users;  --> to get the number of user we have in the users table. Total of 50 users we have.
		
		I want to get the details of the last 10 users. 
		SELECT *
		FROM users
		OFFSET 40;   --> Skip the first 40 users from the result-set and show the last 10 user's details 
		
4) LIMIT keyword:
==========================
	It's going to constrain the number of records we get back from the result of a query. LIMIT is going to make sure that we only take some specific number of records from top out of the result-set. 
		
		SELECT *
		FROM users
		LIMIT 5;   --> to get the first 5 records from the users table
		
	Question:  
		a) Retrieve the 5 least expensive products
	
			SELECT * 
			FROM products
			ORDER BY price ASC
			LIMIT 5;
			
		b) Retrieve the least expensive products
	
			SELECT * 
			FROM products
			ORDER BY price ASC
			LIMIT 1;
			
		c) Retrieve the 5 most expensive products
	
			SELECT * 
			FROM products
			ORDER BY price DESC
			LIMIT 5;
		
		d) Retrieve the most expensive products
	
			SELECT * 
			FROM products
			ORDER BY price DESC
			LIMIT 1;

	You are frequently going to see LIMIT and OFFSET being used together.

		e) Retrieve the 5 most expensive products except the most expensive one 
	
			SELECT * 
			FROM products
			ORDER BY price DESC
			LIMIT 5
			OFFSET 1;
			
5) Practical use case of OFFSET and LIMIT keywords together:
	A very common use of LIMIT and OFFSET together is any time when you are working with large set of records that you want to display to a user on the UI. Our products table is just having 550 different products in it but across the world, there are companies like Amazon who has millions of products. In such cases, it might be just too much information to show to a user on 1 single screen. So, you might want to only show users, say, 20 records/products at a time. To do so, you can apply the OFFSET and LIMIT together. 
	
		SELECT * 
		FROM products
		ORDER BY price
		LIMIT 20
		OFFSET 0;    --> This would give us our 1st page of results to show to a user 
		
		SELECT * 
		FROM products
		ORDER BY price
		LIMIT 20
		OFFSET 20;    --> This would give us our 2nd page of results to show to a user 
		
		SELECT * 
		FROM products
		ORDER BY price
		LIMIT 20
		OFFSET 40;    --> This would give us our 3rd page of results to show to a user 
		
		and so on...
		
6) Write a query that shows the names of only the second and third most expensive phones.

	For reference, here is the phones table:

	+-------------+--------------+-------+------------+
	| name        | manufacturer | price | units_sold |
	+-------------+--------------+-------+------------+
	| N1280       | Nokia        | 199   | 1925       |
	+-------------+--------------+-------+------------+
	| Iphone 4    | Apple        | 399   | 9436       |
	+-------------+--------------+-------+------------+
	| Galaxy S    | Samsung      | 299   | 2359       |
	+-------------+--------------+-------+------------+
	| S5620 Monte | Samsung      | 250   | 2385       |
	+-------------+--------------+-------+------------+
	| N8          | Nokia        | 150   | 7543       |
	+-------------+--------------+-------+------------+
	| Droid       | Motorola     | 150   | 8395       |
	+-------------+--------------+-------+------------+
	| Wave S8500  | Samsung      | 175   | 9259       |
	+-------------+--------------+-------+------------+
		
		SELECT name 
		FROM phones
		ORDER BY price DESC
		LIMIT 2
		OFFSET 1;
		
7) UNION and INTERSECT keyword in SQL:
=======================================
	The UNION operator is used to combine the result-set of two or more SELECT statements. Every SELECT statement within UNION must have the same number of columns. The columns must also have similar data types. The columns in every SELECT statement must also be in the same order

	Question:
		a) Find the 4 products with the highest price
			SELECT *
			FROM products
			ORDER BY price DESC
			LIMIT 4;
			
		b) Find the 4 products with the highest price/weight ratio. If the price/weight ratio is more then it is a very profitable item/product to ship. Cost efficient product to ship
			SELECT *
			FROM products
			ORDER BY price/weight DESC
			LIMIT 4;
			
		c) Find the 4 products with the highest price and the 4 products with the highest price/weight ratio
			(
				SELECT *
				FROM products
				ORDER BY price DESC
				LIMIT 4
			)
			UNION
			(
				SELECT *
				FROM products
				ORDER BY price/weight DESC
				LIMIT 4
			);
			
	If the UNION keyword sees an identical row in both the result-sets then it's only going to list that row in the output one single time.   
	If we don't want UNION to remove the duplicate rows then we can change the keyword slightly and use UNION ALL instead. UNION ALL keyword means don't remove the duplicate rows. 
		
			(
				SELECT *
				FROM products
				ORDER BY price DESC
				LIMIT 4
			)
			UNION ALL
			(
				SELECT *
				FROM products
				ORDER BY price/weight DESC
				LIMIT 4
			);
			
	If you want to see the rows that are common in both the result-sets of the SELECT queries then use the INTERSECT keyword
			
			(
				SELECT *
				FROM products
				ORDER BY price DESC
				LIMIT 4
			)
			INTERSECT
			(
				SELECT *
				FROM products
				ORDER BY price/weight DESC
				LIMIT 4
			);
			
8) Write a query that will print the manufacturer of phones where the phone's price is less than 170.  Also print all manufacturer that have created more than two phones.
	For reference, here is the phones table:

	+-------------+--------------+-------+------------+
	| name        | manufacturer | price | units_sold |
	+-------------+--------------+-------+------------+
	| N1280       | Nokia        | 199   | 1925       |
	+-------------+--------------+-------+------------+
	| Iphone 4    | Apple        | 399   | 9436       |
	+-------------+--------------+-------+------------+
	| Galaxy S    | Samsung      | 299   | 2359       |
	+-------------+--------------+-------+------------+
	| S5620 Monte | Samsung      | 250   | 2385       |
	+-------------+--------------+-------+------------+
	| N8          | Nokia        | 150   | 7543       |
	+-------------+--------------+-------+------------+
	| Droid       | Motorola     | 150   | 8395       |
	+-------------+--------------+-------+------------+
	| Wave S8500  | Samsung      | 175   | 9259       |
	+-------------+--------------+-------+------------+
	
		SELECT manufacturer FROM phones WHERE price < 170
		UNION 
		SELECT manufacturer FROM phones GROUP BY manufacturer HAVING COUNT(*) > 2;
		
9) Sub-queries in SQL:
======================================
  Sub-queries are always written inside the parenthesis. We can use Sub-queries in many different locations inside another/outer query. 
  I am going to show you a query that has several different Sub-queries inside of it. 
	SELECT 
		p1.name, 
	    (SELECT COUNT(name) FROM products)
	FROM (SELECT * FROM products) AS p1
	JOIN (SELECT * FROM products) AS p2 ON p1.id = p2.id 
	WHERE p1.id IN (SELECT id FROM products)
	
  Let's see the examples of having a sub-query inside of a SELECT statement 
	SELECT name, price, (SELECT MAX(price) FROM products)
	FROM products
	WHERE price > 867;         --->  This query will give the name of the product, its price and price of the most expensive product
	
	SELECT name, price, (SELECT price FROM products WHERE id = 3) AS id_3_price
	FROM products
	WHERE price > 867;
	
  Let's see the examples of having a sub-query inside of a FROM clause
	SELECT name, price_weight_ratio
	FROM (
		SELECT name, price/weight AS price_weight_ratio
		FROM products
	) AS p 
	WHERE price_weight_ratio > 5;      --> Sub-query inside of the FROM clause
	
	In the below particular example, we are going to see that we don't really have to return a set of rows and columns(table structured data) from a sub-query inside of a FROM clause. We can return just one single value as long as the outer SELECT, WHERE, etc are compatible with it. 
		SELECT * 
		FROM (SELECT MAX(price) FROM products) AS p;
		
  Let's see the examples of having a sub-query inside of a JOIN clause
	SELECT first_name
	FROM users
	JOIN (
		SELECT user_id FROM orders
		WHERE product_id = 3
	) AS o 
	ON o.user_id = users.id;     --> getting the firstname of all the users who have ordered product of ID 3

	We could also do something like below but that is more time consuming than the above query:
	SELECT first_name
	FROM users
	JOIN orders
	ON orders.user_id = users.id
	WHERE orders.product_id = 3;     --> getting the firstname of all the users who have ordered product of ID 3
	
	Question:
		a) List the name and price of all products that are more expensive than all products in the 'Toys' department
			
			SELECT name, price
			FROM products
			WHERE price > (
				SELECT MAX(price) FROM products WHERE department = 'Toys'
			);
			
		b) Write a query that prints the name and price for each phone. In addition, print out the ratio of the phones price against max price of all phones. Rename this third column to price_ratio
		For reference, here is the phones table:

		+-------------+--------------+-------+------------+
		| name        | manufacturer | price | units_sold |
		+-------------+--------------+-------+------------+
		| N1280       | Nokia        | 199   | 1925       |
		+-------------+--------------+-------+------------+
		| Iphone 4    | Apple        | 399   | 9436       |
		+-------------+--------------+-------+------------+
		| Galaxy S    | Samsung      | 299   | 2359       |
		+-------------+--------------+-------+------------+
		| S5620 Monte | Samsung      | 250   | 2385       |
		+-------------+--------------+-------+------------+
		| N8          | Nokia        | 150   | 7543       |
		+-------------+--------------+-------+------------+
		| Droid       | Motorola     | 150   | 8395       |
		+-------------+--------------+-------+------------+
		| Wave S8500  | Samsung      | 175   | 9259       |
		+-------------+--------------+-------+------------+
		
			SELECT 
				name, 
				price, 
				price/(SELECT MAX(price) FROM phones) AS price_ratio
			FROM phones;
			
			Note: The below query will not work because to calculate the MAX price, we have to traverse through all the rows of the price cloumn but we are not doing that in the below query
				SELECT name, price, price/MAX(price) AS price_ratio
				FROM phones;
				
		c) Find the average number of orders for all users. USE OUR E-Commerce application DATABASE
			The average number of orders for all users is nothing but Total_number_of_orders/Total_number_of_users
			
				SELECT AVG(p.order_count)
				FROM (
					SELECT user_id, COUNT(*) AS order_count
					FROM orders
					GROUP BY user_id
				) AS p 
				
		d) Calculate the average price of phones for each manufacturer.  Then print the highest average price. Rename this value to max_average_price
			For reference, here is the phones table:

			+-------------+--------------+-------+------------+
			| name        | manufacturer | price | units_sold |
			+-------------+--------------+-------+------------+
			| N1280       | Nokia        | 199   | 1925       |
			+-------------+--------------+-------+------------+
			| Iphone 4    | Apple        | 399   | 9436       |
			+-------------+--------------+-------+------------+
			| Galaxy S    | Samsung      | 299   | 2359       |
			+-------------+--------------+-------+------------+
			| S5620 Monte | Samsung      | 250   | 2385       |
			+-------------+--------------+-------+------------+
			| N8          | Nokia        | 150   | 7543       |
			+-------------+--------------+-------+------------+
			| Droid       | Motorola     | 150   | 8395       |
			+-------------+--------------+-------+------------+
			| Wave S8500  | Samsung      | 175   | 9259       |
			+-------------+--------------+-------+------------+
			
				SELECT MAX(avg_price) AS max_average_price
				FROM (
					SELECT AVG(price) AS avg_price
					FROM phones 
					GROUP BY manufacturer
				) AS p;
				
		e) Show the id of orders that involve a product with a price/weight ratio greater than 50
			
			SELECT id
			FROM orders
			WHERE product_id IN (
				SELECT id FROM products
				WHERE price/weight > 50
			);
			
		f) Show the name of all products with a price greater than the average product price 
			
			SELECT name
			FROM products
			WHERE price > (
				SELECT AVG(price) FROM products
			);
			
		g) Write a query that prints out the name and price of phones that have a price greater than the Samsung S5620 Monte.
		   For reference, here is the phones table:

			+-------------+--------------+-------+------------+
			| name        | manufacturer | price | units_sold |
			+-------------+--------------+-------+------------+
			| N1280       | Nokia        | 199   | 1925       |
			+-------------+--------------+-------+------------+
			| Iphone 4    | Apple        | 399   | 9436       |
			+-------------+--------------+-------+------------+
			| Galaxy S    | Samsung      | 299   | 2359       |
			+-------------+--------------+-------+------------+
			| S5620 Monte | Samsung      | 250   | 2385       |
			+-------------+--------------+-------+------------+
			| N8          | Nokia        | 150   | 7543       |
			+-------------+--------------+-------+------------+
			| Droid       | Motorola     | 150   | 8395       |
			+-------------+--------------+-------+------------+
			| Wave S8500  | Samsung      | 175   | 9259       |
			+-------------+--------------+-------+------------+
			
				SELECT name, price 
				FROM phones 
				WHERE price > (
					SELECT price FROM phones WHERE name = 'S5620 Monte'
				);
				
		h) Show the name of all products that are not in the same department as products with a price less than 100
		
			SELECT name 
			FROM products 
			WHERE department NOT IN (
				SELECT department FROM products WHERE price < 100
			);
			
		i) Show the name, department, and price of products that are more expensive than all products in the 'Industrial' department
		
			SELECT name, department, price
			FROM products
			WHERE price > ALL (            ---> '> ALL' makes sure that 'price' column value is greater than all the data/values present inside the following list 
				SELECT price FROM products WHERE department = 'Industrial'
			);
			
		Notes:
			For example, '50 > ALL (20, 10)' --> this condition returns true as 50 is greater than all of the values in the right hand side set
			For example, '50 > ALL (20, 100)' --> this condition returns false as 50 is not greater than all of the values in the right hand side set
			For example, '50 < ALL (200, 100)' --> this condition returns true as 50 is less than all of the values in the right hand side set
			For example, '50 < ALL (20, 100)' --> this condition returns false as 50 is not less than all of the values in the right hand side set
			
		j) Show the name, department and price of products that are more expensive than at least one product in the 'Industrial' department
		
			SELECT name, department, price
			FROM products
			WHERE price > SOME (
				SELECT price
				FROM products
				WHERE department = 'Industrial'
			);
			
		Notes: 
			i) 'SOME' is actually an alias for 'ANY'. So, you can make use of the keyword either 'ANY' OR 'SOME'. They do exactly the same thing. 
			ii) For example, '50 > SOME (20, 100)' --> this condition returns true as 50 is greater than at aleast one of the values in the right hand side set 
				For example, '50 > SOME (200, 100)' --> this condition returns false as 50 is not greater than at aleast one of the values in the right hand side set
				For example, '50 < SOME (20, 100)' --> this condition returns true as 50 is less than at aleast one of the values in the right hand side set
				For example, '50 < SOME (20, 10)' --> this condition returns false as 50 is not less than at aleast one of the values in the right hand side set
		
		k) Write a query that prints the name of all phones that have a price greater than all phones made by Samsung.
		   For reference, here is the phones table:

			+-------------+--------------+-------+------------+
			| name        | manufacturer | price | units_sold |
			+-------------+--------------+-------+------------+
			| N1280       | Nokia        | 199   | 1925       |
			+-------------+--------------+-------+------------+
			| Iphone 4    | Apple        | 399   | 9436       |
			+-------------+--------------+-------+------------+
			| Galaxy S    | Samsung      | 299   | 2359       |
			+-------------+--------------+-------+------------+
			| S5620 Monte | Samsung      | 250   | 2385       |
			+-------------+--------------+-------+------------+
			| N8          | Nokia        | 150   | 7543       |
			+-------------+--------------+-------+------------+
			| Droid       | Motorola     | 150   | 8395       |
			+-------------+--------------+-------+------------+
			| Wave S8500  | Samsung      | 175   | 9259       |
			+-------------+--------------+-------+------------+
			
				SELECT name
				FROM phones
				WHERE price > ALL (
					SELECT price FROM phones
					WHERE manufacturer = 'Samsung'
				);	
				
		l) Show the name, department, and price of the most expensive product in each department
			
			SELECT name, department, price 
			FROM products AS p1
			WHERE p1.price = (
				SELECT MAX(price)
				FROM products AS p2
				WHERE p1.department = p2.department
			);                                         
			
			This(the above one) is called a correlated subquery. The term correlated subquery essentially means that we are referring to some row from the outside query in the inner_query/subquery.
			
		m) Without using a join or a group by, print the number of orders for each product
		
			SELECT p1.name,
				 ( 
				   SELECT COUNT(*)
				   FROM orders AS o1
				   WHERE o1.product_id = p1.id
				 ) AS num_of_orders
			FROM products AS p1;

			In this case rather than using a correlated subquery in a WHERE clause, we are going to instead place a correlated subquery in the SELECT. We can make use of a correlated subquery not only inside of WHERE clause, we can use them just about anywhere. 
			When we make use of a correlated subquery, we can imagine that it is like a double nested for loop. So, as the outer query goes through every row of the products table, for every one of these products table rows, we are going to take a look at every single row out of some other source of data(in this case, it's going to be orders table). 
			
		n) A SELECT without a FROM
		
			If we place just a subquery inside of a SELECT, we can get away/going without putting in a FROM or JOIN or anything else like that as long as the subquery returns one single value. 
			
				SELECT (
					SELECT MAX(price)
					FROM products
				);
				
			Why we would ever do this? 
			This is actually really useful if we are ever trying to calculate just one single value that is the result of several other values. For example, let's say, we want to find the ratio of maximum priced item to the lowest priced item. 
			
				SELECT (
					SELECT MAX(price)
					FROM products
				) / (
					SELECT MIN(price)
					FROM products
				);
				
			Other way of writing the above query is shown below:
				SELECT (SELECT MAX(price) FROM products;) / (SELECT MIN(price) FROM products);
				
				SELECT (SELECT MAX(price) FROM products;) / (SELECT AVG(price) FROM products);  --> ratio of max. priced item to the average price of each items
				
			We can also print out multiple values from different subqueries. Let's say we want to print out both the max. priced item and average price of each items. 
			
				SELECT (SELECT MAX(price) FROM products;), (SELECT AVG(price) FROM products);
			
		o) Print out the number of distinct/unique departments we have in the products table
			
			SELECT COUNT(DISTINCT department)
			FROM products;
			
			We can only do a COUNT when we are finding DISTINCT over one single column because COUNT function takes a single cloumn. 
			
		p) If you ever want to select the unique values across multiple columns then we could do
			
			SELECT DISTINCT department, name
			FROM products;       --> this will give us a list of all the unique combinations of these two columns 
			
			If we do a DISTINCT over two or more columns then we can no longer do a count to it. 
				
				SELECT COUNT(DISTINCT department, name)
				FROM products;         --> You will get an error. You can't wrap DISTINCT with multiple columns with a COUNT aggregate function
				
			
			
			