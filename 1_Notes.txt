1) Types of relationship that 2 table might have:
=======================================================
	a) One-to-many relationship
	b) Many-to-one relationship
	c) One-to-one relationship
	d) Many-to-many relationship
	
2) Event triggers and Stored Procedures concepts in DB

3) There are various options that we can use with the foreign key constraints. ON DELETE CASCADE is frequently a really good option if we want to try to delete a user and all the data associated to it.  

4) You can set the DEFAULT constraint for any column. The DEFAULT constraint is used to set a default value for a column.
	CREATE TABLE Persons (
        City varchar(255) DEFAULT 'Delhi'
    );
	
  Example:
	CREATE TABLE Student (
		sno INT PRIMARY KEY,
		sname VARCHAR(20),
		age INT
	);
	INSERT INTO Student(sno, sname,age) 
	VALUES(1,'Ankit',17),
		  (2,'Ramya',18),
          (3,'Ram',16);
	SELECT * FROM Student;
	CREATE TABLE Course (
		cno INT PRIMARY KEY,
		cname VARCHAR(20)
	);
	INSERT INTO Course(cno, cname) 
    VALUES(101,'c'),
          (102,'c++'),
          (103,'DBMS');
	SELECT * FROM Course;
	CREATE TABLE Enroll (
		sno INT,
		cno INT,
		jdate date,
		PRIMARY KEY(sno,cno),
		FOREIGN KEY(sno) 
			REFERENCES Student(sno)
			ON DELETE CASCADE
		FOREIGN KEY(cno) 
			REFERENCES Course(cno)
			ON DELETE CASCADE
	);
	INSERT INTO Enroll(sno,cno,jdate) 
	 VALUES(1, 101, '5-jun-2021'),
		   (1, 102, '5-jun-2021'),
		   (2, 103, '6-jun-2021');
		   
5) SQL Queries as per our Database design(Photo Sharing App like Twitter)
==================================================================================
CREATE TABLE users(
  id SERIAL PRIMARY KEY,
  username VARCHAR(50)
);
 
CREATE TABLE photos (       ---> It's equivalent to User's posts. Users can upload their photos to their profile also.
  id SERIAL PRIMARY KEY,
  url VARCHAR(200),
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE
);
 
CREATE TABLE comments (       ---> comments table has two foreign key columns. one relates each comment to a user and the other relates each comment to a photo  
  id SERIAL PRIMARY KEY,
  contents VARCHAR(240),
  user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
  photo_id INTEGER REFERENCES photos(id) ON DELETE CASCADE
);                        ---> Users can comment on any other user's post or their own post also
 
INSERT INTO users (username) 
VALUES 
  ('Reyna.Marvin'),
        ('Micah.Cremin'),
        ('Alfredo66'),
        ('Gerard_Mitchell42'),
        ('Frederique_Donnelly');
 
INSERT INTO photos (url, user_id)
VALUES
  ('https://santina.net', 3),
        ('https://alayna.net', 5),
        ('https://kailyn.name', 3),
        ('http://marjolaine.name', 1),
        ('http://chet.net', 5),
        ('http://jerrold.org', 2),
        ('https://meredith.net', 4),
        ('http://isaias.net', 4),
        ('http://dayne.com', 4),
        ('http://colten.net', 2),
        ('https://adelbert.biz', 5),
        ('http://kolby.org', 1),
        ('https://deon.biz', 2),
        ('https://marina.com', 5),
        ('http://johnson.info', 1),
        ('https://linda.info', 2),
        ('https://tyrique.info', 4),
        ('http://buddy.info', 5),
        ('https://elinore.name', 2),
        ('http://sasha.com', 3);
 
INSERT INTO comments (contents, user_id, photo_id)
VALUES
  ('Quo velit iusto ducimus quos a incidunt nesciunt facilis.', 2, 4),
        ('Non est totam.', 5, 5),
        ('Fuga et iste beatae.', 3, 3),
        ('Molestias tempore est.', 1, 5),
        ('Est voluptatum voluptatem voluptatem est ullam quod quia in.', 1, 5),
        ('Aut et similique porro ullam.', 1, 3),
        ('Fugiat cupiditate consequatur sit magni at non ad omnis.', 1, 2),
        ('Accusantium illo maiores et sed maiores quod natus.', 2, 5),
        ('Perferendis cumque eligendi.', 1, 2),
        ('Nihil quo voluptatem placeat.', 5, 5),
        ('Rerum dolor sunt sint.', 5, 2),
        ('Id corrupti tenetur similique reprehenderit qui sint qui nulla tenetur.', 2, 1),
        ('Maiores quo quia.', 1, 5),
        ('Culpa perferendis qui perferendis eligendi officia neque ex.', 1, 4),
        ('Reprehenderit voluptates rerum qui veritatis ut.', 1, 1),
        ('Aut ipsum porro deserunt maiores sit.', 5, 3),
        ('Aut qui eum eos soluta pariatur.', 1, 1),
        ('Praesentium tempora rerum necessitatibus aut.', 4, 3),
        ('Magni error voluptas veniam ipsum enim.', 4, 2),
        ('Et maiores libero quod aliquam sit voluptas.', 2, 3),
        ('Eius ab occaecati quae eos aut enim rem.', 5, 4),
        ('Et sit occaecati.', 4, 3),
        ('Illum omnis et excepturi totam eum omnis.', 1, 5),
        ('Nemo nihil rerum alias vel.', 5, 1),
        ('Voluptas ab eius.', 5, 1),
        ('Dolor soluta quisquam voluptatibus delectus.', 3, 5),
        ('Consequatur neque beatae.', 4, 5),
        ('Aliquid vel voluptatem.', 4, 5),
        ('Maiores nulla ea non autem.', 4, 5),
        ('Enim doloremque delectus.', 1, 4),
        ('Facere vel assumenda.', 2, 5),
        ('Fugiat dignissimos dolorum iusto fugit voluptas et.', 2, 1),
        ('Sed cumque in et.', 1, 3),
        ('Doloribus temporibus hic eveniet temporibus corrupti et voluptatem et sint.', 5, 4),
        ('Quia dolorem officia explicabo quae.', 3, 1),
        ('Ullam ad laborum totam veniam.', 1, 2),
        ('Et rerum voluptas et corporis rem in hic.', 2, 3),
        ('Tempora quas facere.', 3, 1),
        ('Rem autem corporis earum necessitatibus dolores explicabo iste quo.', 5, 5),
        ('Animi aperiam repellendus in aut eum consequatur quos.', 1, 2),
        ('Enim esse magni.', 4, 3),
        ('Saepe cumque qui pariatur.', 4, 4),
        ('Sit dolorem ipsam nisi.', 4, 1),
        ('Dolorem veniam nisi quidem.', 2, 5),
        ('Porro illum perferendis nemo libero voluptatibus vel.', 3, 3),
        ('Dicta enim rerum culpa a quo molestiae nam repudiandae at.', 2, 4),
        ('Consequatur magnam autem voluptas deserunt.', 5, 1),
        ('Incidunt cum delectus sunt tenetur et.', 4, 3),
        ('Non vel eveniet sed molestiae tempora.', 2, 1),
        ('Ad placeat repellat et veniam ea asperiores.', 5, 1),
        ('Eum aut magni sint.', 3, 1),
        ('Aperiam voluptates quis velit explicabo ipsam vero eum.', 1, 3),
        ('Error nesciunt blanditiis quae quis et tempora velit repellat sint.', 2, 4),
        ('Blanditiis saepe dolorem enim eos sed ea.', 1, 2),
        ('Ab veritatis est.', 2, 2),
        ('Vitae voluptatem voluptates vel nam.', 3, 1),
        ('Neque aspernatur est non ad vitae nisi ut nobis enim.', 4, 3),
        ('Debitis ut amet.', 4, 2),
        ('Pariatur beatae nihil cum molestiae provident vel.', 4, 4),
        ('Aperiam sunt aliquam illum impedit.', 1, 4),
        ('Aut laudantium necessitatibus harum eaque.', 5, 3),
        ('Debitis voluptatum nesciunt quisquam voluptatibus fugiat nostrum sed dolore quasi.', 3, 2),
        ('Praesentium velit voluptatem distinctio ut voluptatum at aut.', 2, 2),
        ('Voluptates nihil voluptatum quia maiores dolorum molestias occaecati.', 1, 4),
        ('Quisquam modi labore.', 3, 2),
        ('Fugit quia perferendis magni doloremque dicta officia dignissimos ut necessitatibus.', 1, 4),
        ('Tempora ipsam aut placeat ducimus ut exercitationem quis provident.', 5, 3),
        ('Expedita ducimus cum quibusdam.', 5, 1),
        ('In voluptates doloribus aut ut libero possimus adipisci iste.', 3, 2),
        ('Sit qui est sed accusantium quidem id voluptatum id.', 1, 5),
        ('Libero eius quo consequatur laudantium reiciendis reiciendis aliquid nemo.', 1, 2),
        ('Officia qui reprehenderit ut accusamus qui voluptatum at.', 2, 2),
        ('Ad similique quo.', 4, 1),
        ('Commodi culpa aut nobis qui illum deserunt reiciendis.', 2, 3),
        ('Tenetur quam aut rerum doloribus est ipsa autem.', 4, 2),
        ('Est accusamus aut nisi sit aut id non natus assumenda.', 2, 4),
        ('Et sit et vel quos recusandae quo qui.', 1, 3),
        ('Velit nihil voluptatem et sed.', 4, 4),
        ('Sunt vitae expedita fugiat occaecati.', 1, 3),
        ('Consequatur quod et ipsam in dolorem.', 4, 2),
        ('Magnam voluptatum molestias vitae voluptatibus beatae nostrum sunt.', 3, 5),
        ('Alias praesentium ut voluptatem alias praesentium tempora voluptas debitis.', 2, 5),
        ('Ipsam cumque aut consectetur mollitia vel quod voluptates provident suscipit.', 3, 5),
        ('Ad dignissimos quia aut commodi vel ut nisi.', 3, 3),
        ('Fugit ut architecto doloremque neque quis.', 4, 5),
        ('Repudiandae et voluptas aut in excepturi.', 5, 3),
        ('Aperiam voluptatem animi.', 5, 1),
        ('Et mollitia vel soluta fugiat.', 4, 1),
        ('Ut nemo voluptas voluptatem voluptas.', 5, 2),
        ('At aut quidem voluptatibus rem.', 5, 1),
        ('Temporibus voluptates iure fuga alias minus eius.', 2, 3),
        ('Non autem laboriosam consectetur officiis aut excepturi nobis commodi.', 4, 3),
        ('Esse voluptatem sed deserunt ipsum eaque maxime rerum qui.', 5, 5),
        ('Debitis ipsam ut pariatur molestiae ut qui aut reiciendis.', 4, 4),
        ('Illo atque nihil et quod consequatur neque pariatur delectus.', 3, 3),
        ('Qui et hic accusantium odio quis necessitatibus et magni.', 4, 2),
        ('Debitis repellendus inventore omnis est facere aliquam.', 3, 3),
        ('Occaecati eos possimus deleniti itaque aliquam accusamus.', 3, 4),
        ('Molestiae officia architecto eius nesciunt.', 5, 4),
        ('Minima dolorem reiciendis excepturi culpa sapiente eos deserunt ut.', 3, 3);
		
6) For each comment, show the contents of the comment and the username of the user who wrote the comment
      SELECT contents, username
	  FROM comments
	  JOIN users ON users.id = comments.user_id;
	  
7) If the Join of two tables end up having the duplicate cloumn names then you can fetch those duplicate columns by using their table name
	  SELECT comments.id, users.id
	  FROM comments
	  JOIN users ON users.id = comments.user_id;
	  
	  OR
	  
	  SELECT comments.id AS comments_id, users.id AS users_id
	  FROM comments
	  JOIN users ON users.id = comments.user_id;
	  
8) In addition to renaming cloumns, we can also rename tables using AS keyword
	  SELECT c.id, u.id
	  FROM comments AS c           --> AS keyword is optional here but it's always good to have it 
	  JOIN users AS u ON u.id = c.user_id;
	  
	  OR
	  
	  SELECT c.id, u.id
	  FROM comments c
	  JOIN users u ON u.id = c.user_id;
	  
9) Missing data in Joins
===============================================
	INSERT INTO photos (url, user_id)
	VALUES ('https://banner.jpg', NULL);

	SELECT url, username
	FROM photos
	JOIN users ON users.id = photos.user_id;    -->  This will not return the above inserted photo because that photo is not associated with any user 
	
	OR
	
	SELECT url, username
	FROM photos
	INNER JOIN users ON users.id = photos.user_id;
	
Run the below query to get the correct/complete result of this question --> Show each and every photo URL and the username of the poster(of that particular post)
 
	SELECT url, username
	FROM photos
	LEFT JOIN users ON users.id = photos.user_id;

	OR
	
	SELECT url, username
	FROM photos
	LEFT OUTER JOIN users ON users.id = photos.user_id;    --> In some Database, LEFT JOIN is called LEFT OUTER JOIN
	
10) Does the order of tables in 'FROM' and 'JOIN' make a difference?
		Yes, there is a difference in the result when the order in which we list the tables in 'FROM' and 'JOIN' reverses. This is only in the case of LEFT OUTER JOIN and RIGHT OUTER JOIN. Results remain the same even if you reverses the table order in case of INNER JOIN and FULL JOIN.
		
		SELECT url, username
		FROM photos
		LEFT JOIN users ON users.id = photos.user_id;	
		
		SELECT url, username
		FROM users
		LEFT JOIN photos ON users.id = photos.user_id;	

11) We can also use WHERE keyword on the results of the JOIN statement.
       Scenario:
		Users can comment on photos that they have posted. List the URL and contents for every photo/comment where this occured. Basically, we want to find out the photos/posts whose author is same as the author as the comment on it. In other words, in which photo, user has commented on its own photo.
			
			SELECT url, contents
			FROM comments
			JOIN photos ON photos.id = comments.photo_id
			WHERE comments.user_id = photos.user_id;
			
			
12) Three way Join/Join of three different related tables: 
==================================================================
	Scenario:
	 Now, we also want to find out the user info who has both posted and commented. Basically, we want to find out 'who has commented on their own photos, photos details and what they have commented?'. So, in this case, we need information from comments, photos and users tables. That means we need to join them all together to form a temporary table.
	 
		SELECT url, contents, username
		FROM comments
		JOIN photos ON photos.id = comments.photo_id
		JOIN users ON users.id = comments.user_id AND users.id = photos.user_id;
		
13) Grouping in SQL: 
========================================
	Reduces many rows down to fewer rows. Done by using the 'GROUP BY' keyword. It forms a new temporary table, by grouping all the rows of the table, from which we can select information but there is a big catch on what we can select. We can only directly select the grouped cloumn. Directly you can't select the ungrouped cloumns of your table.
		SELECT user_id
		FROM comments
		GROUP BY user_id;    --> This query works fine because we are selecting the grouped cloumn i.e., user_id of the table i.e., comments
		
		SELECT contents
		FROM comments
		GROUP BY user_id;    --> This query doesn't work because we are selecting the ungrouped cloumn i.e., contents of the table i.e., comments

14) Aggregates in SQL:
=========================================
	Reduces many values down to one. Done by using 'aggregate functions'. Aggregates functions are mostly used with grouping in SQL. 
	COUNT aggregate function doesn't count the NULL values. In other words, whenever we do count on a column, NULL values are not counted.
	
		SELECT COUNT(*) FROM photos;  --> Count all the rows of this particular table
		
		SELECT user_id, COUNT(*)
		FROM comments
		GROUP BY user_id;

15) Example of GROUP By with Aggregate Function:
========================================================
	Question:  Find the number of comments for each photo
		SELECT photo_id, COUNT(*)
		FROM comments
		GROUP BY photo_id; 
		
16) Question:
		Write a query that will print an author's name and the number of books they have authored.

		An example of the authors table

		+----+-----------------+
		| id | name            |
		+----+-----------------+
		| 1  | JK Rowling      |
		+----+-----------------+
		| 2  | Stephen King    |
		+----+-----------------+
		| 3  | Agatha Christie |
		+----+-----------------+
		| 4  | Dr Seuss        |
		+----+-----------------+

		An example of the books table

		+----+---------------------+-----------+
		| id | title               | author_id |
		+----+---------------------+-----------+
		| 1  | Chamber of Secrets  | 1         |
		+----+---------------------+-----------+
		| 2  | Prisoner of Azkaban | 1         |
		+----+---------------------+-----------+
		| 3  | The Dark Tower      | 2         |
		+----+---------------------+-----------+
		| 4  | Murder At the Links | 3         |
		+----+---------------------+-----------+
		| 5  | Affair at Styles    | 3         |
		+----+---------------------+-----------+
		| 6  | Cat in the Hat      | 4         |
		+----+---------------------+-----------+
		
			SELECT name, COUNT(*) FROM books
			JOIN authors ON authors.id = books.author_id
			group by name;
			
17) HAVING keyword is always used after GROUP BY keyword. You are never going to see HAVING without a GROUP BY keyword. You don't have to have a HAVING if you have a GROUP BY but if you want to do any filtering on the groups then you will make use of HAVING.

18) Question:
		a) Find the number of comments for each photo where the photo_id is less than 3 and the photo has more than 2 comments
			SELECT photo_id, COUNT(*)
			FROM comments
			WHERE photo_id < 3
			GROUP BY photo_id
			HAVING COUNT(*) > 2;

	Note:  Anytime we are talking about some filtering along with an aggregate function, that is when we want to use HAVING.  
		
		b) Find the users(specifically user_ids) where the user has commented on the first 2 photos and the user added more than 2 comments on those photos
			SELECT user_id, COUNT(*)
			FROM comments
			WHERE photo_id <= 2
			GROUP BY user_id
			HAVING COUNT(*) > 2;
			
		c) You are trying to find the phone manufacturers with the greatest revenue from selling phones.
		Given a table of phones, print the names of manufacturers and total revenue (price * units_sold) for all phones.  Only print the manufacturers who have revenue greater than 2,000,000 for all the phones they sold.

		Hints:  From the problem statement, it looks like you don't need to filter down any of the initial rows. That means you probably won't have to use the WHERE keyword!

		+-------------+--------------+-------+------------+
		| name        | manufacturer | price | units_sold |
		+-------------+--------------+-------+------------+
		| N1280       | Nokia        | 199   | 1925       |
		+-------------+--------------+-------+------------+
		| Iphone 4    | Apple        | 399   | 9436       |
		+-------------+--------------+-------+------------+
		| Galaxy S    | Samsung      | 299   | 2359       |
		+-------------+--------------+-------+------------+
		| S5620 Monte | Samsung      | 250   | 2385       |
		+-------------+--------------+-------+------------+
		| N8          | Nokia        | 150   | 7543       |
		+-------------+--------------+-------+------------+
		| Droid       | Motorola     | 150   | 8395       |
		+-------------+--------------+-------+------------+
		| Wave S8500  | Samsung      | 175   | 9259       |
		+-------------+--------------+-------+------------+
		
			SELECT manufacturer, sum(price * units_sold)
			FROM phones
			GROUP BY manufacturer
			HAVING sum(price*units_sold) > 2000000;
			


	